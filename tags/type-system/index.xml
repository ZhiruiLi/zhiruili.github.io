<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Type System on 简单易懂的现代魔法</title><link>/tags/type-system/</link><description>Recent content in Type System on 简单易懂的现代魔法</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&lt;p>本网站采用 &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0&lt;/a> 协议进行授权&lt;/p>&lt;p>© 2021 Zhirui Li. All rights reserved.&lt;/p></copyright><lastBuildDate>Fri, 22 Jul 2016 00:00:00 +0000</lastBuildDate><atom:link href="/tags/type-system/index.xml" rel="self" type="application/rss+xml"/><item><title>Null 值及其处理方式</title><link>/posts/null-value-and-handling/</link><pubDate>Fri, 22 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/null-value-and-handling/</guid><description>
Null 值由来已久，它最早是由 Tony Hoare 图方便而创造的，后来被证明这是个错误，而他本人也对此进行了道歉，并称之为「十亿美金错误」1。
I call it my billion-dollar mistake. It was the invention of the null reference in 1965. At that time, I was designing the first comprehensive type system for references in an object oriented language (ALGOL W). My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn&amp;rsquo;t resist the temptation to put in a null reference, simply because it was so easy to implement.</description></item><item><title>协变、逆变与不变</title><link>/posts/covariant-and-contravariant/</link><pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/covariant-and-contravariant/</guid><description>
型变（variance）是类型系统里的概念，包括协变（covariance）、逆变（contravariance）和不变（invariance）。这组术语的目的是描述泛型情况下类型参数的父子类关系如何影响参数化类型的父子类关系。也就是说，假设有一个接收一个类型参数的参数化类型 T 和两个类 A，B，且 B 是 A 的子类，那么 T[A] 与 T[B] 的关系是什么？如果 T[B] 是 T[A] 的子类，那么这种型变就是「协变」，因为参数化类型 T 的父子类关系与其类型参数的父子类关系是「同一个方向的」。如果 T[A] 是 T[B] 的子类，则这种关系是「逆变」，因为参数化类型 T 的父子类关系与类型参数的父子类关系是「相反方向的」。类似地，如果 T[A] 和 T[B] 之间不存在父子类关系，那么这种型变就是「不变」1。
协变 在 Java 中，数组是协变的，也就是说，假设有一个基类 Person 和一个 Person 的子类 Student。因为 Student 类型是 Person 类型的子类，所以 Student[] 类型是 Person[] 类型的子类，这个设计似乎相当符合直觉，一个学生（Student）是一个人（Person），那一个存放着学生的数组当然也应该是一个存放着人的数组了。
然而这是错误的。
假设 Person 有另一个子类 Teacher，考虑如下代码：
Student[] students = { new Student() } students[0].study(); Person[] persons = students; persons[0] = new Teacher(); students[0].study(); // Oops! 这段代码显然错了，看一下刚刚做了什么。我们在 Student 数组里存放了一个 Student 实例，紧接着调用了这个对象的 study 方法，这个显然没错；然后将这个数组赋值给一个 Person 数组，由于数组是协变的，所以这步没问题；然后，向 Person 数组里添加一个 Teacher 的实例，这步也没问题，因为一个 Teacher 是一个 Person；接下来是获取 Student 数组里的对象，调用 Student 类的 study 方法，这似乎也是合理的。那问题在哪呢？</description></item></channel></rss>