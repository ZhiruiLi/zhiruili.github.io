<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on 简易现代魔法</title><link>/tags/go/</link><description>Recent content in Go on 简易现代魔法</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&lt;p>本网站采用 &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0&lt;/a> 协议进行授权&lt;/p>&lt;p>© 2021 Zhirui Li. All rights reserved.&lt;/p></copyright><lastBuildDate>Sun, 22 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>另一种 C++ 程序错误处理方式</title><link>/posts/cpp-error-handling/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate><guid>/posts/cpp-error-handling/</guid><description>
C++ 是一个很灵活的语言，这把双刃剑一方面使得 C++ 有很强大的表达能力，但也使得其编程风格相当混乱。在这篇文章中，我将聊一下 C++ 错误处理的方式优劣，以及我们团队是如何进行 C++ 错误处理的。</description></item><item><title>从并发模型看 Go 的语言设计</title><link>/posts/golang-design-study/</link><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid>/posts/golang-design-study/</guid><description>
Go 语言是一个基于 CSP 模型原生支持并发的语言。在这篇文章中，我将通过几个例子，从其并发模型和并发程序的实现的角度，讨论一下 Go 语言设计的优劣。</description></item></channel></rss>