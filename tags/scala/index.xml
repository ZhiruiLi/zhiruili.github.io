<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scala on 简易现代魔法</title><link>/tags/scala/</link><description>Recent content in Scala on 简易现代魔法</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&lt;p>本网站采用 &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0&lt;/a> 协议进行授权&lt;/p>&lt;p>© 2021 Zhirui Li. All rights reserved.&lt;/p></copyright><lastBuildDate>Sun, 02 Oct 2016 00:00:00 +0000</lastBuildDate><atom:link href="/tags/scala/index.xml" rel="self" type="application/rss+xml"/><item><title>不可变的状态</title><link>/posts/immutable-state/</link><pubDate>Sun, 02 Oct 2016 00:00:00 +0000</pubDate><guid>/posts/immutable-state/</guid><description>
状态总与变化相关，如果我们不使用可变的变量，那要如何表示状态？又该如何使状态间的转换更加方便？</description></item><item><title>Parser Combinator</title><link>/posts/parser-combinator/</link><pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate><guid>/posts/parser-combinator/</guid><description>
直接手写词法语法分析往往非常痛苦，parser combinator 也许是一个不错的解决方案，其中还能反映一种有趣的编程思想。</description></item><item><title>使用 Future 进行并发编程</title><link>/posts/handle-concurrency-using-future/</link><pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate><guid>/posts/handle-concurrency-using-future/</guid><description>
Future 能够将计算任务的并发化和计算最终的执行方式分离，通过一套设计良好的 API 使得对数据的操作变得简单。</description></item><item><title>Null 值及其处理方式</title><link>/posts/null-value-and-handling/</link><pubDate>Fri, 22 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/null-value-and-handling/</guid><description>
讨论 null 值的由来及几种典型的表示方式和处理方式。</description></item><item><title>协变、逆变与不变</title><link>/posts/covariant-and-contravariant/</link><pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/covariant-and-contravariant/</guid><description>
类型系统中的协变、逆变、不变分别是什么概念，以及 Java 对此的处理有何问题？</description></item></channel></rss>