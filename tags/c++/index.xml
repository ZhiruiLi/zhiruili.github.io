<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on 简易现代魔法</title><link>/tags/c++/</link><description>Recent content in C++ on 简易现代魔法</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&lt;p>本网站采用 &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0&lt;/a> 协议进行授权&lt;/p>&lt;p>© 2021 Zhirui Li. All rights reserved.&lt;/p></copyright><lastBuildDate>Fri, 27 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>错误使用 C++ 模板特化产生的坑</title><link>/posts/cpp-template-specialization/</link><pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate><guid>/posts/cpp-template-specialization/</guid><description>
今天在群里看到了一个错误使用 C++ 模板特化产生的坑，有点意思，这里记录一下。</description></item><item><title>另一种 C++ 程序错误处理方式</title><link>/posts/cpp-error-handling/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate><guid>/posts/cpp-error-handling/</guid><description>
C++ 是一个很灵活的语言，这把双刃剑一方面使得 C++ 有很强大的表达能力，但也使得其编程风格相当混乱。在这篇文章中，我将聊一下 C++ 错误处理的方式优劣，以及我们团队是如何进行 C++ 错误处理的。</description></item><item><title>实际工程中的 C++ 模板</title><link>/posts/real-world-cpp-template/</link><pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate><guid>/posts/real-world-cpp-template/</guid><description>
C++ 的模板是 C++ 的一个重要的语言特性，在这篇文章里，我将聊一下最近实际工程中的一些模板的应用，希望可以让更多人了解到模板并不是一个可怕的存在，以及一些常见的使用方式。</description></item><item><title>静态作用域和动态作用域</title><link>/posts/dynamic-scope/</link><pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate><guid>/posts/dynamic-scope/</guid><description>
解释静态作用域和动态作用域的区别，并对其进行实现与模拟。</description></item><item><title>Rust 提升安全性的方式</title><link>/posts/rust-safety/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>/posts/rust-safety/</guid><description>
通过和 C++ 进行对比，谈谈 Rust 如何通过编译器和程序语义避免程序员犯错。</description></item></channel></rss>