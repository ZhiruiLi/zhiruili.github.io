<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Articles on 简单易懂的现代魔法</title><link>/categories/articles/</link><description>Recent content in Articles on 简单易懂的现代魔法</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&lt;p>本网站采用 &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0&lt;/a> 协议进行授权&lt;/p>&lt;p>© 2021 Zhirui Li. All rights reserved.&lt;/p></copyright><lastBuildDate>Sat, 04 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/articles/index.xml" rel="self" type="application/rss+xml"/><item><title>实时渲染中的 PBR 材质</title><link>/posts/real-time-pbr/</link><pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/real-time-pbr/</guid><description>
基于物理的渲染（PBR）已经成为游戏真实感渲染中的重要基础技术，本文介绍了 PBR 的概念和实时渲染中使用的算法。</description></item><item><title>深入理解渲染方程</title><link>/posts/rendering-equation/</link><pubDate>Sat, 07 Aug 2021 00:00:00 +0000</pubDate><guid>/posts/rendering-equation/</guid><description>
渲染方程是现代渲染的核心理论概念，本文深入了剖析渲染方程包含的物理意义，有助于学习更多进阶的渲染技术。</description></item><item><title>图形学入门（三）：基础着色</title><link>/posts/basic-shading/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>/posts/basic-shading/</guid><description>
将物体显示到屏幕上是一个看起来简单实际却相当复杂的过程，本文是图形学入门系列的第三篇，讨论了如何进行简单的着色计算，实现带有立体感的视觉效果。</description></item><item><title>图形学入门（二）：光栅化</title><link>/posts/rasterization/</link><pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate><guid>/posts/rasterization/</guid><description>
将物体显示到屏幕上是一个看起来简单实际却相当复杂的过程，本文是图形学入门系列的第二篇，讨论了在坐标变换后我们如何将图形具体绘制在屏幕上的过程。</description></item><item><title>图形学入门（一）：坐标变换</title><link>/posts/transformations/</link><pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate><guid>/posts/transformations/</guid><description>
将物体显示到屏幕上是一个看起来简单实际却相当复杂的过程，本文作为图形学入门系列第一篇，讨论了这个过程的第一步：将物体的坐标从自身的坐标系最终变为标准化的坐标的过程。</description></item><item><title>另一种 C++ 程序错误处理方式</title><link>/posts/cpp-error-handling/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate><guid>/posts/cpp-error-handling/</guid><description>
C++ 是一个很灵活的语言，这把双刃剑一方面使得 C++ 有很强大的表达能力，但也使得其编程风格相当混乱。在这篇文章中，我将聊一下 C++ 错误处理的方式优劣，以及我们团队是如何进行 C++ 错误处理的。</description></item><item><title>实际工程中的 C++ 模板</title><link>/posts/real-world-cpp-template/</link><pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate><guid>/posts/real-world-cpp-template/</guid><description>
C++ 的模板是 C++ 的一个重要的语言特性，在这篇文章里，我将聊一下最近实际工程中的一些模板的应用，希望可以让更多人了解到模板并不是一个可怕的存在，以及一些常见的使用方式。</description></item><item><title>从并发模型看 Go 的语言设计</title><link>/posts/golang-design-study/</link><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid>/posts/golang-design-study/</guid><description>
Go 语言是一个基于 CSP 模型原生支持并发的语言。在这篇文章中，我将通过几个例子，从其并发模型和并发程序的实现的角度，讨论一下 Go 语言设计的优劣。</description></item><item><title>静态作用域和动态作用域</title><link>/posts/dynamic-scope/</link><pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate><guid>/posts/dynamic-scope/</guid><description>
解释静态作用域和动态作用域的区别，并对其进行实现与模拟。</description></item><item><title>Rust 提升安全性的方式</title><link>/posts/rust-safety/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>/posts/rust-safety/</guid><description>
通过和 C++ 进行对比，谈谈 Rust 如何通过编译器和程序语义避免程序员犯错。</description></item><item><title>不可变的状态</title><link>/posts/immutable-state/</link><pubDate>Sun, 02 Oct 2016 00:00:00 +0000</pubDate><guid>/posts/immutable-state/</guid><description>
状态总与变化相关，如果我们不使用可变的变量，那要如何表示状态？又该如何使状态间的转换更加方便？</description></item><item><title>Parser Combinator</title><link>/posts/parser-combinator/</link><pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate><guid>/posts/parser-combinator/</guid><description>
直接手写词法语法分析往往非常痛苦，parser combinator 也许是一个不错的解决方案，其中还能反映一种有趣的编程思想。</description></item><item><title>使用 Future 进行并发编程</title><link>/posts/handle-concurrency-using-future/</link><pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate><guid>/posts/handle-concurrency-using-future/</guid><description>
Future 能够将计算任务的并发化和计算最终的执行方式分离，通过一套设计良好的 API 使得对数据的操作变得简单。</description></item><item><title>Null 值及其处理方式</title><link>/posts/null-value-and-handling/</link><pubDate>Fri, 22 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/null-value-and-handling/</guid><description>
讨论 null 值的由来及几种典型的表示方式和处理方式。</description></item><item><title>协变、逆变与不变</title><link>/posts/covariant-and-contravariant/</link><pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/covariant-and-contravariant/</guid><description>
类型系统中的协变、逆变、不变分别是什么概念，以及 Java 对此的处理有何问题？</description></item><item><title>计算的表示</title><link>/posts/representation-of-calculation/</link><pubDate>Fri, 08 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/representation-of-calculation/</guid><description>
计算不是计算机，计算也不是 1 + 2，它是一个更为本质的东西。通过用 lambda 演算来描述计算可以从另一个角度对其进行理解。</description></item></channel></rss>